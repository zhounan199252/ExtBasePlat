<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.0.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
         http://www.springframework.org/schema/tx 
         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
         
	<!-- 打开Spring的Annotation支持 -->
	<context:annotation-config />
	<!-- 设定Spring 去哪些包中找Annotation -->
	<context:component-scan base-package="com.pmcc.core" />


	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!--
		 配置连接池的初始值 
		<property name="initialSize" value="1" />
		连接池的最大值
		 <property name="maxActive" value="500"/> 
		 最大空闲时，当经过一个高峰之后，连接池可以将一些用不到的连接释放，一直减少到maxIdle为止
		 <property name="maxIdle" value="2"/> 
		当最小空闲时，当连接少于minIdle时会自动去申请一些连接 
		<property name="minIdle" value="1" />
		<property name="maxActive" value="100" />
		<property name="maxIdle" value="20" />
		<property name="maxWait" value="1000" />
		 -->
	</bean>
	<!-- 导入Src目录下的jdbc.properties文件 -->
	<context:property-placeholder location="classpath:application.properties" />
	<!--创建Spring的SessionFactory工厂 -->
	<!-- 如果使用的是Annotation的方式，不能使用LocalSessionFactoryBean,而应该使用 org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 设置Spring取那个包中查找相应的实体类 -->
		<property name="packagesToScan">
			<value>com.pmcc.core.domain</value>
		</property>
		<property name="hibernateProperties">
			<!-- <value> hibernate.dialect=org.hibernate.dialect.HSQLDialect </value> -->
			<props>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.connection.autocommit">true</prop>
			</props>
		</property>
	</bean>
	<!-- 开启HibernateTemplate，并且为其注入SessionFactory
	使用HibernateTemplate不太方便的就是要获取session得通过getSessionFactory()方法获取 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>


	<!-- 配置Spring的事务处理 -->
	<!-- 创建事务管理器-->
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" />
<!-- 配置AOP，Spring是通过AOP来进行事务管理的 -->
	<!--<aop:config>-->
	<!--&lt;!&ndash; 设置pointCut表示哪些方法要加入事务处理 &ndash;&gt;-->
	<!--&lt;!&ndash; 以下的事务是声明在DAO中，但是通常都会在Service来处理多个业务对象逻辑的关系，注入删除，更新等，此时如果在执行了一个步骤之后抛出异常-->
		<!--就会导致数据不完整，所以事务不应该在DAO层处理，而应该在service，这也就是Spring所提供的一个非常方便的工具，声明式事务 &ndash;&gt;-->
		<!--<aop:pointcut id="allMethods"-->
			<!--expression="execution(* com.pmcc.core.manager.*.*(..))" />-->
		<!--&lt;!&ndash; 通过advisor来确定具体要加入事务控制的方法 &ndash;&gt;-->
		<!--<aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods" />-->
	<!--</aop:config>-->
<!--&lt;!&ndash; 配置哪些方法要加入事务控制 &ndash;&gt;-->
	<!--<tx:advice id="txAdvice" transaction-manager="txManager">-->
		<!--<tx:attributes>-->
		<!--&lt;!&ndash; 让所有的方法都加入事务管理，为了提高效率，可以把一些查询之类的方法设置为只读的事务 &ndash;&gt;-->
			<!--<tx:method name="find*" propagation="REQUIRED" read-only="true"/>-->
			<!--<tx:method name="get*" propagation="REQUIRED" read-only="true"/>-->
			<!--&lt;!&ndash; 以下方法都是可能设计修改的方法，就无法设置为只读 &ndash;&gt;-->
			<!--<tx:method name="del*" propagation="REQUIRED"/>-->
			<!--<tx:method name="update*" propagation="REQUIRED"/>-->
			<!--<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>-->
			<!--<tx:method name="insert*" propagation="REQUIRED"/>-->
		<!--</tx:attributes>-->
	<!--</tx:advice>-->
	
</beans>
